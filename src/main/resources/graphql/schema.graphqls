type Player {
    id: ID!
    username: String!
    online: Boolean!
}

type Room {
    id: ID!
    name: String!
    owner: User!
    players: [Player!]!
    maxPlayers: Int!
    playerAssignment: [PlayerAssignment!]!
}

type AuthPayload {
    token: String
    player: Player
}

type PlayerAssignment {
    id: ID!
    player: Player!
    color: String!
    room: Room!

type Move {
    x: Int!
    y: Int!
    color: Int!
    userId: ID!
}

type GameState {
    id: ID!
    boardState: [[IntArray!]]!
    moves: [Move!]!
    isBlackMove: Boolean!
}

type ChatMessage {
    id: ID!
    roomId: ID!
    playerId: ID!
    message: String!
    timestamp: String!
}

type Mutation {
    createPlayer(username:String!, password:String!): Player
    createRoom(name:String!, ownerId:ID!): Room
    joinRoom(roomId: ID!, playerId: ID!): Room
    login(username:String!, password:String!): AuthPayload
    startGame(roomId: ID!): None
    createGame: GameState


type Query {
    getGameState(roomId: ID!): GameState
}
